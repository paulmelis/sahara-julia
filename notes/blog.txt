The snake and the serpent - 


julia 1.6 rc1


@btime from BenchmarkTools, which runs the same test multiple times
and reports the minimum time taken (plus mem alloc info)

all tests with only a single thread



--track-allocation=user, will run slower, but get annoted source files
with bytes of memory allocated per line
512x512, 16 spp



5ca1c0133e2dcf14ae8c07d1544b72798ffddb26

Before mat4 length explicit

melis@juggle 20:20:~/concepts/sahara-julia$ j16 sahara.jl
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:09
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:07
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:06
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:06
RayStats(4194304, 5267902, 1974723)
  6.742 s (158412412 allocations: 6.64 GiB)
  
  
mat4-warntype.png

const mat4 = MMatrix{4,4,Float32}

to

const mat4 = MMatrix{4,4,Float32,16}

mat4-warntype-fixed.png

melis@juggle 20:27:~/concepts/sahara-julia$ j16 sahara.jl
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:05
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
<PerspectiveCamera pos=<vec3 0.5 -3.0 0.5> lookat=<vec3 0.5 0.0 0.5> forward=<vec3 0.0 1.0 0.0> right=<vec3 1.0 0.0 0.0> up=<vec3 0.0 0.0 1.0>>
Starting rendering 512x512, 16 spp, 1 threads
Progress: 100%|??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????| Time: 0:00:03
RayStats(4194304, 5267902, 1974723)
  3.247 s (16869402 allocations: 414.40 MiB)
Saving output file

Memory allocation down by a factor of 16.4x, number of allocations by a factor of 9.4x, render in total time more than 2x faster!



--track-allocation=user


worker.jl.18909.mem

        -         # XXX apparently this allocates?
238215296         f::Float32 = dot(Ln, ip_n) * light.strength
        0         if f > 0
        0             radiance += vec3(f, f, f)
        -         end

light-strength-warntype.png

light is of type Light, which is an abstract type, with 2 concrete light types
as subtypes (this is a very OO way of modeling things):

abstract type Light end

struct PointLight <: Light
    position::vec3
    strength::Float32
end

# Hemisphere covering positive Z-axis, centered at origin
struct HemisphericalLight <: Light
    radius::Float32
    strength::Float32
end

when accessing light.strength the compiler cannot deduce from the source code
alone what type of value the strength field is, so it flags it as type Any. 
Using Any is almost always expensive, due to boxing/unboxing (boxing allocates), 
type-checking at run-time during unboxing, etc.

instead let's try adding

strength(p::PointLight) = p.strength
strength(h::HemisphericalLight) = h.strength

and changing 

light.strength 

into 

strength(light)


worker.jl.20174.mem

        -         # XXX apparently this allocates?
        0         f::Float32 = dot(Ln, ip_n) * strength(light) #light.strength 
        0         if f > 0
        0             radiance += vec3(f, f, f)
        -         end

success!

light-strength-warntype-fixed.png

checking the difference for a rendering run:

RayStats(4194304, 5267902, 1974723)
  2.155 s (1980861 allocations: 187.18 MiB)

Total render time further reduced by a factor 1.5x, number of allocations by 8.5x
and total memory allocated by 2.2x.

512x512 pixels, 256 SPP, 4 threads

RayStats(67108864, 84280436, 31606670)
  10.205 s (31614034 allocations: 2.83 GiB)

BEFORE IT WAS (perf-julia.txt):

RayStats(67108864, 84281922, 31599363)
  73.436 s (2534539704 allocations: 106.21 GiB)

So overall a speedup of 7.2x with just a few small code changes.
And there's quite a few more places that can be optimized this way.


1024x1024, 1024 spp, 4 threads, 02:56
RayStats(1073741824, 1348509546, 505678543)
2,927,929,913 rays
16,635,965 rays/second

c6af1767d60ad4361f773c4016f06b960345e300

util.js, create_orthonormal_basis, use MVector instead of Float32[]

RayStats(67108864, 84286126, 31608491)
  9.259 s (7352 allocations: 6.52 MiB)
  
183,003,481 rays
19,764,929 rays/s
  
Some allocations will remain, for example the array needed to hold
the output image, but that's no issue as it is allocated only once at
the beginning of the program.

*.1750.mem

framebuffer = 3,145,808
per-bucket mini framebuffer = 3,178,496
rest = 512,411

847fe2c6b715ec87a1f75552f272d8c803e8f08b

minor cleanups

ab19a79ef48d252f504ba9529294f84f2184338d

RayStats(67108864, 84280010, 31608285)
  9.318 s (7396 allocations: 6.52 MiB)

Slightly more allocations?

*.4074.mem show no difference?


Julia programs feel like scripts, but that's deceiving. It's best to think
of Julia as working with a full compiler (like for C++ or Swift) but one that has
lots of dynamic features. Julia is really not a dynamic language, but compiled
instead of interpreted.